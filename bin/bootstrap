#!/bin/bash
CURRENT_USER=`whoami`

if [ $CURRENT_USER = "root" ]; then
echo "Please run this as your normal user, not root"
exit 1
fi

# Uninstall salt
# If salt was previously installed remove it and nginx in
# favor of the new method below.
if command -v salt &> /dev/null ; then
  echo "Uninstalling salt/nginx"
  brew uninstall salt
  brew uninstall swig
  brew services stop nginx
  brew uninstall nginx
  rm -rf $HOME/.lldev
fi

# Enable key repeat.  Editors are super awkward without this
defaults write -g ApplePressAndHoldEnabled -bool false

# Install Homebrew
which -s brew
if [[ $? != 0 ]] ; then
  echo "Homebrew not found. Installing it..."
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
  echo "Homebrew found. Updating it..."
  brew update
fi
# Install Dependencies via Brewfile
brew bundle -v


# Configure Caddy
# - reverse proxy for local *.lessonly.test
# - automatic local certs
cp bin/Caddyfile $(brew --prefix)/etc/Caddyfile
# https://caddyserver.com/docs/automatic-https#local-https
# add/trust caddy's local root CA certificate
# it generates intermediate certificates from the root which are used to sign individual site certificates
caddy trust
# stop (if necessary) and start the service formula immediately and register it to launch at login.
brew services restart caddy


# Configure Dnsmasq
# dnsmasq handles the local dns translation from *.lessonly.test -> 127.0.0.1
# install dnsmasq config
cp bin/dnsmasq.conf $(brew --prefix)/etc/dnsmasq.conf
# make /etc/resolver directory if it does not exist
sudo mkdir -p /etc/resolver
# install our resolver
sudo cp bin/lessonly-resolver /etc/resolver/lessonly.test
# stop (if necessary) and start the service formula immediately and register it to launch at boot.
sudo brew services restart dnsmasq


# Configure port forwarding
# copy port forwarding anchor file
sudo cp bin/test.lessonly.anchor /etc/pf.anchors/test.lessonly
# copy boot script to setup port forwarding
sudo cp bin/lldev-network-setup.sh /usr/local/bin/lldev-network-setup.sh
# manually run script
sudo sh /usr/local/bin/lldev-network-setup.sh
# set script to run on boot
pfservice=$(sudo launchctl list | grep test.lessonly.network-setup)
if [ ! "$pfservice" ] ; then
  sudo cp bin/test.lessonly.network-setup.plist /Library/LaunchDaemons/test.lessonly.network-setup.plist
  sudo launchctl load -w -F /Library/LaunchDaemons/test.lessonly.network-setup.plist
fi


#
# Github ssh key setup
#
stat ~/.ssh/github
if [[ $? != 0 ]]; then
  echo "Github SSH key not found. Generating..."
  echo -en "\n\033[1mEnter your the email address you'll use for Github:\033[0m "
  read email
  ssh-keygen -f ~/.ssh/github -t rsa -b 4096 -C $email

  echo "Adding SSH key to ssh-agent and keychain"
  eval "$(ssh-agent -s)"
  ssh-add -K ~/.ssh/github
  if ! grep "~/.ssh/github" ~/.ssh/config; then
    echo -e '\n\nHost Github\n  HostName github.com\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/github' >> ~/.ssh/config
  fi

  echo "SSH key generated. \033[1mAdd it to Github using these instructions:\033[0m https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account\n"
  cat ~/.ssh/github.pub
  echo ""

  if which pbcopy > /dev/null; then
    cat ~/.ssh/github.pub | pbcopy
    echo "It's been copied into your clipboard, ready to paste into Github."
  fi

  if which open > /dev/null; then
    open https://github.com/settings/keys
  elif which xdg-open > /dev/null; then
    xdg-open https://github.com/settings/keys
  fi
fi

# configure asdf for zsh
# https://asdf-vm.com/guide/getting-started.html#_3-install-asdf
if grep -q "asdf.sh" ${ZDOTDIR:-~}/.zshrc
then
    # noop as already exists
    echo "asdf.sh already configured"
else
  if [[ $(uname -m) == 'arm64' ]]; then
    echo -e "\n. $(brew --prefix asdf)/asdf.sh" >> ${ZDOTDIR:-~}/.zshrc
  else
    echo -e "\n. $(brew --prefix asdf)/libexec/asdf.sh" >> ${ZDOTDIR:-~}/.zshrc
  fi
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}" >> ~/.zprofile
fi

# Install oh-my-zsh
sh -c "RUNZSH=no bin/oh-my-zsh.sh"

echo "bin/bootstrap complete"
