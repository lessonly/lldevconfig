#!/bin/bash
CURRENT_USER=`whoami`
CHECKOUTPATH="$( cd "$(dirname "$0")" ; cd ..; pwd -P )"

if [ $CURRENT_USER = "root" ]; then
echo "Please run this as your normal user, not root"
exit 1
fi

# Enable key repeat.  Editors are super awkward without this
defaults write -g ApplePressAndHoldEnabled -bool false

# Install Homebrew
which -s brew
if [[ $? != 0 ]] ; then
  echo "Homebrew not found. Installing it..."
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
  echo "Homebrew found. Updating it..."
  brew update
fi

# Install Dependencies via Brewfile
brew bundle -v

#
# Github ssh key setup
#
stat ~/.ssh/github
if [[ $? != 0 ]]; then
  echo "Github SSH key not found. Generating..."
  echo -en "\n\033[1mEnter your the email address you'll use for Github:\033[0m "
  read email
  ssh-keygen -f ~/.ssh/github -t rsa -b 4096 -C $email

  echo "Adding SSH key to ssh-agent and keychain"
  eval "$(ssh-agent -s)"
  ssh-add -K ~/.ssh/github
  if ! grep "~/.ssh/github" ~/.ssh/config; then
    echo -e '\n\nHost Github\n  HostName github.com\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/github' >> ~/.ssh/config
  fi

  echo "SSH key generated. \033[1mAdd it to Github using these instructions:\033[0m https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account\n"
  cat ~/.ssh/github.pub
  echo ""

  if which pbcopy > /dev/null; then
    cat ~/.ssh/github.pub | pbcopy
    echo "It's been copied into your clipboard, ready to paste into Github."
  fi

  if which open > /dev/null; then
    open https://github.com/settings/keys
  elif which xdg-open > /dev/null; then
    xdg-open https://github.com/settings/keys
  fi
fi

# only run if the installdir doesn't exist
if [ -d $HOME/.lldev ]; then
  echo "$HOME/.lldev already exists. Skipping this step"
else
  echo "Installing Lessonly Local Development tools"
  # set up base config
  echo "Making $HOME/.lldev"
  mkdir $HOME/.lldev
  GRAINS=$HOME/.lldev/grains
  #
  # Ugly but straightforward
  #
  # produce the grains file
  #
  touch $GRAINS
  echo "user:" >> $GRAINS;
  echo "  username: $CURRENT_USER" >> $GRAINS;
  echo "  install_user: $CURRENT_USER" >> $GRAINS;
  echo "  homedir: $HOME" >> $GRAINS;
  echo "" >> $GRAINS;
  echo "lldev:" >> $GRAINS;
  echo "  src_dir: $CHECKOUTPATH" >> $GRAINS;
  echo "  install_dir: $HOME/.lldev" >> $GRAINS;
  echo "" >> $GRAINS;
  sed -e '1,/ - COPY BELOW HERE -/d' <$CHECKOUTPATH/base_config/grains >>$GRAINS

  #
  # produce the salt minion config
  #
  MINION=$HOME/.lldev/minion
  echo "file_client: local" >> $MINION
  echo "user: $CURRENT_USER" >> $MINION
  echo "sudo_user: root" >> $MINION
  echo "file_roots:" >> $MINION
  echo "  base:" >> $MINION
  echo "    - $CHECKOUTPATH" >> $MINION
  echo "pillar_roots:" >> $MINION
  echo "  base:" >> $MINION
  echo "    - $CHECKOUTPATH/pillar" >> $MINION
fi

# configure asdf for zsh
# https://asdf-vm.com/guide/getting-started.html#_3-install-asdf
if grep -q "asdf.sh" ${ZDOTDIR:-~}/.zshrc
then
    # noop as already exists
    echo "asdf.sh already configured"
else
  echo -e "\n. $(brew --prefix asdf)/libexec/asdf.sh" >> ${ZDOTDIR:-~}/.zshrc
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}" >> ~/.zprofile
fi

# Install oh-my-zsh
sh -c "RUNZSH=no bin/oh-my-zsh.sh"

echo "bin/bootstrap complete"
