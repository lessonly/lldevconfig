#!/bin/bash
CURRENT_USER=`whoami`
CHECKOUTPATH="$( cd "$(dirname "$0")" ; cd ..; pwd -P )"

if [ $CURRENT_USER = "root" ]; then
echo "Please run this as your normal user, not root"
exit 1
fi

# Enable key repeat.  Editors are super awkward without this
defaults write -g ApplePressAndHoldEnabled -bool false

# Install Salt
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  # Linux

  sudo apt-get update
  sudo apt-get upgrade

  which -s salt-call
  if [[ $? != 0 ]] ; then
    echo "Salt not found. Installing it."
    sudo wget -O - https://repo.saltstack.com/apt/ubuntu/18.04/amd64/2019.2/SALTSTACK-GPG-KEY.pub | sudo apt-key add -
    sudo deb http://repo.saltstack.com/apt/ubuntu/18.04/amd64/2019.2 bionic main
    sudo apt-get install salt-master
    sudo apt-get install salt-minion
    sudo apt-get install salt-ssh
    sudo apt-get install salt-syndic
    sudo apt-get install salt-cloud
    sudo apt-get install salt-api
    sudo apt-get install python-m2crypto
  else
    sudo systemctl restart salt-minion
  fi

elif [[ "$OSTYPE" == "darwin"* ]]; then
  # macOS
  which -s brew
  if [[ $? != 0 ]] ; then
    echo "Homebrew not found. Installing it..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    echo "Homebrew found. Updating it..."
    brew update
  fi

  which -s salt-call
  if [[ $? != 0 ]] ; then
    brew install salt
  fi

  # bug with current salt setup which requires manually installing m2crypto which requires swig
  echo "Installing swig"
  brew list swig &>/dev/null || brew install swig

  # lessons app needs this until we remove mimemagic dependency
  echo "Installing shared-mime-info"
  brew list shared-mime-info &>/dev/null || brew install shared-mime-info
else
  echo "I don't know how to use this OS"
  exit 1
fi

#
# Github ssh key setup
#
stat ~/.ssh/github
if [[ $? != 0 ]]; then
  echo "Github SSH key not found. Generating..."
  echo -en "\n\033[1mEnter your the email address you'll use for Github:\033[0m "
  read email
  ssh-keygen -f ~/.ssh/github -t rsa -b 4096 -C $email

  echo "Adding SSH key to ssh-agent and keychain"
  eval "$(ssh-agent -s)"
  ssh-add -K ~/.ssh/github
  if ! grep "~/.ssh/github" ~/.ssh/config; then
    echo -e '\n\nHost Github\n  HostName github.com\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/github' >> ~/.ssh/config
  fi

  echo "SSH key generated. \033[1mAdd it to Github using these instructions:\033[0m https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account\n"
  cat ~/.ssh/github.pub
  echo ""

  if which pbcopy > /dev/null; then
    cat ~/.ssh/github.pub | pbcopy
    echo "It's been copied into your clipboard, ready to paste into Github."
  fi

  if which open > /dev/null; then
    open https://github.com/settings/keys
  elif which xdg-open > /dev/null; then
    xdg-open https://github.com/settings/keys
  fi
fi

# only run if the installdir doesn't exist
if [ -d $HOME/.lldev ]; then
  echo "$HOME/.lldev already exists. Skipping this step"
else
  echo "Installing Lessonly Local Development tools"
  # set up base config
  echo "Making $HOME/.lldev"
  mkdir $HOME/.lldev
  GRAINS=$HOME/.lldev/grains
  #
  # Ugly but straightforward
  #
  # produce the grains file
  #
  touch $GRAINS
  echo "user:" >> $GRAINS;
  echo "  username: $CURRENT_USER" >> $GRAINS;
  echo "  install_user: $CURRENT_USER" >> $GRAINS;
  echo "  homedir: $HOME" >> $GRAINS;
  echo "" >> $GRAINS;
  echo "lldev:" >> $GRAINS;
  echo "  src_dir: $CHECKOUTPATH" >> $GRAINS;
  echo "  install_dir: $HOME/.lldev" >> $GRAINS;
  echo "" >> $GRAINS;
  sed -e '1,/ - COPY BELOW HERE -/d' <$CHECKOUTPATH/base_config/grains >>$GRAINS

  #
  # produce the salt minion config
  #
  MINION=$HOME/.lldev/minion
  echo "file_client: local" >> $MINION
  echo "user: $CURRENT_USER" >> $MINION
  echo "sudo_user: root" >> $MINION
  echo "file_roots:" >> $MINION
  echo "  base:" >> $MINION
  echo "    - $CHECKOUTPATH" >> $MINION
  echo "pillar_roots:" >> $MINION
  echo "  base:" >> $MINION
  echo "    - $CHECKOUTPATH/pillar" >> $MINION
fi

# Ensure zsh is installed
if ! which zsh > /dev/null; then
  echo "Installing zsh..."
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # Linux
    sudo apt-get install zsh
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    brew install zsh
  fi
fi

# Install oh-my-zsh
sh -c "RUNZSH=no bin/oh-my-zsh.sh"


echo "bin/bootstrap complete"
